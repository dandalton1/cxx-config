CMAKE_MINIMUM_REQUIRED( VERSION 3.11.0 )
PROJECT(cxx-config)

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin CACHE INTERNAL "" FORCE)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib CACHE INTERNAL "" FORCE)

OPTION(BUILD_SHARED_LIBS "Build package with shared libraries." ON)
IF(NOT BUILD_SHARED_LIBS)
	SET(CMAKE_EXE_LINKER_FLAGS "-static")
	SET(LINK_SEARCH_START_STATIC TRUE)
ELSE()
	MESSAGE(STATUS "Shared libraries enabled")
ENDIF(NOT BUILD_SHARED_LIBS)


# C++17
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)


IF (BUILD_SHARED_LIBS AND CMAKE_SIZEOF_VOID_P EQUAL 8) # -fPIC is only required
	SET( CMAKE_CXX_FLAGS "-fPIC ${CMAKE_CXX_FLAGS}" )
	SET( CMAKE_C_FLAGS   "-fPIC ${CMAKE_C_FLAGS}")
	SET (CMAKE_POSITION_INDEPENDENT_CODE TRUE)
ELSE()
	SET (CMAKE_POSITION_INDEPENDENT_CODE FALSE)
ENDIF()

# Find and include libxml2 for supporting configuration.
FIND_PACKAGE(LibXml2)
IF ( LIBXML2_FOUND )
	MESSAGE(STATUS "Using xml2 version ${LIBXML2_VERSION_STRING}.")
ELSE()
ENDIF()



FILE(GLOB SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
FILE(GLOB HEADER_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.h)


ADD_LIBRARY(cxx-config ${SOURCE_FILES} ${HEADER_FILES})
TARGET_INCLUDE_DIRECTORIES(cxx-config PRIVATE ${JSONC_INCLUDE_DIRS} ${LIBXML2_INCLUDE_DIR}
										PUBLIC
											${CMAKE_CURRENT_SOURCE_DIR}/
											$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
											$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>
											$<INSTALL_INTERFACE:include>)

IF (BUILD_SHARED_LIBS AND CMAKE_SIZEOF_VOID_P EQUAL 8)
	SET_PROPERTY(TARGET cxx-config PROPERTY POSITION_INDEPENDENT_CODE ON)
ENDIF()

TARGET_LINK_LIBRARIES(cxx-config PUBLIC yaml)


INSTALL(TARGETS cxx-config DESTINATION lib)


ENABLE_TESTING()
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/test)
